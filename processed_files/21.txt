march functional requirements specification standard co emulation modeling interface sce mi john stickley duaine pryor feedback contribution sce api technical group copyright ikos systems inc right reserve publication reproduce store retrieval system transmit form mean electronic mechanical photocopy recording prior write permission copyright holder document nda sce api consortium ikos systems inc great oaks blvd san jose sce api standard co emulation api consortium abstract document describe proposal standard modeling interface emulator verification platform interface provide multiple communication channel software model run host workstation device test dut represent structural hardware netlist run verification platform emulator channel end point present message port dut model message port proxy software model sce api version revision introduction purpose urgent need eda industry meet explode verification requirement soc design team industry deliver verification performance form variety emulation rapid prototyping platform remain problem connect soc modeling environment realize performance potential exist standard verification interface design meet need design team year ago new type interface need meet verification challenge year document proposal multichannel communication interface address challenge new interface cater need emulation end user emulation supplier emulation customer problem solve sce api emulator market today proprietary apis proliferation apis make difficult software base verification product port different emulator restrict solution available customer lead low productivity low return investment roi emulator customer build solution emulation api exist today orient gate level system level verification industry need api take advantage emulation performance emulation supplier problem solve customer reluctant invest build application proprietary apis traditional simulator apis like programmable language interface pli vhdl pli slow emulator party reluctant invest build application proprietary apis scope document direct member standard co emulation api sce api technical committee committee member represent consortium eda customer eda tool supplier dedicate creation breakthrough high performance common emulation api found participant consortium aptix coware ikos system mentor graphics st microelectronics synopsys transeda scope document restrict specifically refer standard co emulation api modeling interface sce mi modeling interface intend possibly part make sce api standard future sce api expand include additional part handle feature debug control code coverage etc document intend describe overall use model sce mi tutorial illustrate use model formal functional specification sce mi api future revision document continue reflect feedback member sce api technical committee hope document undergo relatively quick evolution phase culminate common industry standard simulation emulation tool vendor provide plug play high speed verification solution end user soc design team revision history revision date revise summary revision duaine pryor initial draft base discussion sce api kickoff meeting occur oct paris france john stickley revise document incorporate feedback action item second sce api meeting dec cupertino john stickley revise document incorporate feedback mail review sce api committee revi sion release complete route tutorial sec tion john stickley susan ross incorporate comment committee receive dur e sce api phase ratification process add minor correction convert hand draw figure electronic drawing john stickley correction scemiparameters accessor add sec tion control reset semantic clarification controlled clock semantic add typedef function pointer type add port width acce sor port proxy change vhdl macro datum type std ulogic vector std logic vector john stickley change base feedback change add bit accessor message datum object change version mat major minor minor major major minor john stickley add clarification function work erviceloop add note memory allocation deletion add replacebind ing call cemimessageport proxy class add info message callback handler support add clarification parameter database structure add clarification input ready semantic john stickley incorporate feedback correction john stickley add support care duty cycle clarifica tion duty cycle clock ratio change default duty cycle scemimacros add explanation derive clock ratio clock frequency add section multi clock alignment minor modification scemiic info message handler structure definition acronym abbreviation formal glossary term document find appendix acronym reference document define bca bus cycle accurate model interchangeably rtl model bcash coware style bus cycle accurate shell model bfm bus functional model dut device design test hdl hardware description language verilog vhdl iss instruction set simulator rtc register transfer level model sce api standard co emulation api sce mi standard co emulation api modeling interface ut utc untimed untimed model reference functional specification systemc synopsys inc coware inc frontier design inc coware n2c user manual coware inc ieee standard hardware description language base verilog hardware description language ieee std ieee computer society ieee standard vhdl language reference manual ieee std ieee computer society overview specification describe modeling interface provide multiple channel communication allow software model describe system behavior connect structural model describe implementation device test dut communication channel design transport untimed message arbitrary abstraction end point port channel message channel mean connect software model connect software proxy model message port interface hardware design mean interconnect software model provide software modeling simulation environment systemc scope document software system model different level abstraction include untimed cycle accurate gate level focus sce mi interface purely untimed software model rtl gate level dut summarize follow recommendation api use bridge event base sub cycle accurate simulation environment possible ideal bridge cycle accurate simulation environment ideal bridge untimed simulation environment cycle accurate simulation environment reference document systemc modeling environment untimed software model systemc capable model cycle accurate rtl abstraction level consider ideally suited untimed modeling choose use example document performance goal software describe interface generic ability modeling environment optimize compatible systemc reference similarly hardware optimize prevent undue throttling emulator co modeling session run document term emulation emulator denote structural rtl model dut run emulator rapid prototype simulation environment include software hdl simulator say focus design interface avoid communication bottleneck apparent interface software model emulator compare interface slow software hdl simulator hdl accelerator bottleneck severely compromise performance emulator fast implementation interface inefficient specification interface render inherently susceptible bottleneck reason communication channel describe message transaction orient event orient idea single message channel originate software model trigger dozen hundred clock event hardware channel similarly thousand clock event hardware generate content message channel originate hardware ultimately destine untimed software model document layout document divide follow major chapter chapter overall description use model sce modeling interface sce mi chapter tutorial show use model simple application chapter formal functional specification api document convention reference actual literal name find source code identifier api file name literal name represent courier font key concept word phrase italicize good chance italicize text definition glossary reader direct detailed meaning term overall description use model high level description diagram figure show high level view sce mi interconnect untimed software model structural hardware transactor dut model figure high level view run time component utc model port transactor utc model rtc model utc model port port sce mi infrastructure transactor kernel hardware emulator software host workstation systemc clock reset generation control ssage ort message proxy ssage ort message proxy ssage ort message proxy dut sce mi provide transport infrastructure emulator host workstation side channel interconnect transactor model emulator untimed rtl model workstation important note purpose document term emulator interchangeably simulator capable execute rtl gate level model include software hdl simulator interconnect provide form message channel run software hardware sce mi infrastructure message channel end end software call message port proxy object give api access channel end hardware message port macro instantiate inside transactor connect component transactor message channel input output channel respect hardware important note message channel unidirectional bidirectional bus sense hardware signal like network socket use message passing protocol job transactor serve abstraction gasket decompose message arrive input channel software sequence cycle accurate event clock dut direction flow transactor recompose sequence event come dut message send output channel software addition sce mi infrastructure provide clock reset generation share clock control handshake signal transactor allow transactor freeze control time perform message composition decomposition operation support multi threaded environment sce mi design couple easily multi thread environment systemc function easily single thread environment simple program special service loop function section page provide sce mi call application sce mi infrastructure opportunity service communication channel inside function queue input message send hardware arrive output message dispatch appropriate software model thread specific code inside service loop function sce mi multi threaded environment function design call periodically dedicated thread interface automatically service thread run single thread environment service loop function sprinkle application code strategically place point allow frequently yield cpu cycle sce mi infrastructure service message channel user interface major goal specification address need target audience distinct interest use interface target audience follow end user transactor implementor sce mi infrastructure implementor end user end user interested quickly easily establish bridge software testbench compose high level untimed algorithmic software model hardware du model rtl cycle accurate level abstraction end user aware need gasket bridge level abstraction want creation abstraction bridge painless automated possible ideally end user require familiar detail sce mi api hardware wish rely transactor implementor section provide predefined transactor model directly interface dut remove requirement familiar sce mi hardware interface macro section page possibly scemiclockport macro interface easy understand furnish clock reset similarly software end user rely transactor implementor furnish plug play software model custom tailor software modeling environment systemc model encapsulate detail interface sce mi software present fully untimed easy use interface rest software testbench transactor implementor transactor implementor familiar interface present sce mi concerned implementation job transactor implementor provide plug play transactor model hardware proxy model software end user easily bridge untimed software model rtl represent dut additionally transactor implementor supply proxy model software provide untimed socket transactor model like vendor supply stand ip model detail bridge different abstraction level possibly different verification platform systemc emulator completely hide implementation model distribute appropriate object code netlist rtl code configuration file necessary documentation sce mi infrastructure implementor sce mi infrastructure implementor interested furnish work implementation sce mi run vendor supply verification platform probably distribute product release infrastructure implementor necessarily include software hardware component sce mi release complaint conform requirement set forth specification bridge level modeling abstraction central goal specification provide interface design bridge modeling environment support different level modeling abstraction untimed software level modeling abstraction suppose testbench consist possibly independent model stimulate respond dut different interface point figure depict system configuration test processor dut communication interface include ethernet adapter pci interface usb interface testbench consist model independently interact interface play protocol exchange packet packet recode message intent verify processor dut ability deal system figure initially implement fully untimed level abstraction systemc software modeling environment figure untimed software testbench dut model dut model tb model untimed tb model testbench tb model untimed dut model tb model suppose ultimately want create cycle accurate rtl model dut model eventually synthesize gate verify high speed emulation platform want test unaltered untimed testbench model require way bridge untimed level abstraction bus cycle accurate bca level cycle accurate hardware level modeling abstraction suppose purely untimed system show figure pry apart direct coupling testbench model untimed dut model insert abstraction bridge order bridge untimed system testbench model emulator resident rtl represent dut figure depict new configuration bridge consist set dut proxy model sce mi message input output port proxy set message channel transaction conduit software simulator emulator message input output port set user implement transactor sce mi infrastructure perform task serve transport layer guarantee delivery message forth message port proxy message port end channel message arrive input channel present transactor message input port similarly message arrive output channel dispatch dut proxy software model message output port proxy present rest testbench come directly original untimed dut model depict figure fact testbench model know message actually come go totally different abstraction level dut input proxy job accept untimed message model send message input port proxy transport hardware dut output proxy establish callback monitor message output port proxy arrival message hardware word sce mi infrastructure dispatch message specific dut proxy model address take discussion context user interface describe section page end user know interface dut proxy model software figure transactor model hardware transactor implementor author proxy transactor model sce mi message port clock control component provide model end user figure multichannel abstraction bridge architecture software hardware message input port proxy message input port message output port dut proxy message channel dut message output port proxy tb model xactor untimed testbench model message output port message output port proxy xactor tb model user define dut proxy sce mi infrastructure user define transactor dut model rtl bca message input port proxy message input port xactor tb model abstraction bridge message transaction point make sense describe detail message untimed software modeling environment discussion imply meaning message unit datum arbitrary size abstraction transport channel purely untimed modeling environment message associate specific clock event consider arbitrary data type range abstraction simple bit boolean integer complex class aggregate object form message transport value reference abstract port fully untimed software model sort describe figure substantially detail reference message transport sce mi message channel content serialize large bit vector dut proxy model conversely message arrive message output channel dispatch dut output proxy model de serialize abstract data type point ready presentation abstract output port use systemc terminology dut proxy connect software testbench model hardware message arrive message input channel trigger dozen hundred clock event activity job transactor perform decomposition message datum content sequence clock event present dut hardware model input conversely output message job transactor accept possibly hundred thousand clock event originate dut hardware model assemble serialize bit stream send software de serialization abstract datum type note term message interchangeably transaction context transaction think include infrastructure overhead content addition user payload datum handle low layer interface term message denote user payload datum control uncontrolled time implication transactor job convert message bit stream clock event need ability freeze control time perform operation control clock feed dut stop long operation occur visualize transactor operation strictly term control clock cycle appear edge control clock depict control time view show figure show cycle uncontrolled clock waveform appear like uncontrolled time view show figure view control clock suspend disable dut freeze control time suppose system multiple control clock possibly differ frequency multiple transactor control transactor option stop clock happen control clock system stop unison furthermore transactor stop clock sense clock globally stop continue function correctly need stop clock case typically idle number uclock cclock stop illustrate figure figure control uncontrolled time view control time view uclock cclock transactor operation occur edge control clock uncontrolled time view uclock cclock transactor operation occur control time suspend extra uncontrolled clock cycle sce mi use model semantic clock control describe follow transactor instruct sce mi infrastructure stop control clock cause control time freeze transactor tell sce mi infrastructure control clock stop transactor function correctly control time stop operation transactor transactor question need stop clock transactor need stop control clock perform operation involve decomposition composition transaction arrive go message channel dut clock control clock control transactor transactor clock free run uncontrolled clock provide sce mi hardware infrastructure work flow major aspect work flow involve construct system verification sce mi environment follow software model compilation infrastructure linkage hardware model elaboration software model construction binding software model compilation model run workstation compile common compiler possibly obtain source party vendor form ip iss simulator etc compile model link software sce mi infrastructure form executable program infrastructure linkage infrastructure linkage process read user description hardware source bridge netlist describe interconnect transactor dut sce mi interface component compile netlist form suitable emulation compile process involve add additional structure bridge netlist properly interface user supply netlist sce mi infrastructure implementation component simply infrastructure linker responsible provide core sce mi interface macro hardware process infrastructure linker look parameter specify instantiate interface macro user supply bridge netlist use properly establish dimension interface parameter analyze following number transactor number input output channel width channel number clock clock ratio clock duty cycle final netlist create infrastructure linker appropriately compile emulation platform accordingly convert form suitable run emulator hardware model elaboration compile netlist download emulator elaborate prepare bind software software model construction bind software executable compile link software compilation phase execute cause software model construct workstation process image space construction take place software model bind message port proxy special call provide api parameter pass call establish means specific message port proxy rendezvous associate message port macro hardware binding occur co modeling session proceed sce mi interface component sce mi run time environment consist set interface component hardware software interface provide distinct level functionality introduce section discuss detail later document hardware interface component interface component present sce mi hardware consist small set macro provide connection point transactor sce mi infrastructure compactly define simple use macro fully present necessary aspect interface transactor dut point view specification macro simply represent verilog vhdl model clearly define port parameter interface analogous software api specification define function prototype api call show implementation future implementation interface accommodate model hardware rtl rtc model language like systemc rtl verilog vhdl implementation need provide rtc equivalent macro define specification briefly state macro present following interface transactor dut message input port interface message output port interface control clock control reset generator interface uncontrolled clock uncontrolled reset clock control logic interface software interface component interface present sce mi infrastructure software consist set object method provide following functionality version discovery parameter access initialization shutdown message input output port proxy binding callback registration rendezvous operation hardware infrastructure service loop polling function message input send function message output receive callback dispatching message input ready callback dispatching error handling addition object orient interface set api function provide benefit pure application user guide tutorial hardware interface hardware interface sce mi consist set parametrize macro instantiate inside transactor interact sce mi infrastructure macro parametrize point instantiation crucial parameter dictate dimension sce mi bridge software easily specify user job infrastructure linker learn value parameter customize implementation component insert underneath macro accordingly follow macro fully characterize hardware interface sce mi present transactor dut scemimessageinport macro scemimessageoutport macro scemiclockcontrol macro scemiclockport macro number macro instantiate require system scemimessageinport macro instantiate require message input channel scemimessageoutport macro output channel message port macro bit width parametrize point instantiation exactly scemiclockport macro instantiate define clock system scemiclockport macro instance set parameter fully characterize particular clock scemiclockport macro instantiate level provide control clock reset directly dut scemiclockport macro instance name assign reference clocknum parameter associate counterpart scemiclockcontrol macro inside transactor scemiclockcontrol macro transactor clock control operation associate clock macro mutually associate clocknum parameter scemiclockport macro minimum scemiclockcontrol macro associate infrastructure linker user responsible properly hook essentially macro instance internally generate sce mi infrastructure clock generation circuitry following parameter specify point instantiation macro fully specify require dimension sce mi infrastructure component page detail number transactor number input output channel width channel number control clock clock ratio duty cycle control clock figure show simple example transactor dut connect hardware interface sce mi figure connection sce mi macro hardware transactor dut u1 userdefinedtransactor p1 t1 scemimessageinport transmitready receiveready message p2 d1 c1 cclock scemiclockport cclock creset clk rst dut dutinctrl dutindata dutoutctrl dutoutdata readyforcclock cclockenabled dutoutctrl dutoutdata uclk rst txrdyout rxrdyout messageout dutinctrl dutindata transactorcore txrdyin rxrdyin messagein scemiclockcontrol uclock ureset readyforcclock cclockenabled readyforcclocknegedge cclocknegedgeenabled scemimessageoutport transmitready receiveready message example feature single transactor interact dut interface software scemimessageinport scemimessageoutport addition define single clock control transactor internally scemiclockcontrol macro clock drive dut level scemiclockport macro key point example illustrate transactor implementor page need aware sce mi interface macro scemiclockport transactor encapsulate message port macro scemiclockcontrol macro end user aware hook transactor scemiclockport macro scemiclockport macro instantiation clock parameter specify number show figure component instantiation label cclock map parameter define scemiclockport macro page summarize clocknum rationumerator ratiodenominator dutyhi dutylo phase resetcycle parameter clocknum parameter uniquely identify particular clock associate counterpart scemiclockcontrol macro parametrize clocknum value case addition learn clock specification parameter infrastructure linker learn clock look instance label scemiclockport instance case cclock similarly message port parametrize portwidth parameter summarize infrastructure linker learn following specific information analyze netlist single transactor call bridge u1 assume level module call bridge single divide control clock call cclock control clock ratio enable ideally depend implementation frequency uncontrolled clock control clock parametrize duty cycle phase shift user specify care duty cycle page detail control reset parametrize control clock cycle reset single scemimessageinport call p1 parametrize bit single scemimessageoutport call p2 parametrize bit width complicated example involve transactor clock show appendix page routed tutorial routed tutorial document real life example use sce mi interface untimed software model model systemc hardware model transactor dut model rtl verilog tutorial try illustrate use model sce mi apply multi threaded systemc environment assume familiarity concept systemc include abstract port autonomous thread slave thread module port definition module instantiation interconnect reference description concept design route design small design simulate air passenger travel origin destination traverse interconnect pipe hub routemap design origin destination transactor routemap model dut origin transactor interface scemimessageinport gain access message arrive software destination transactor interface scemimessageoutport send message software origdest module origin destination transactor contain world consist origin anchorage cupertino noida sealbeach uk waltham destination anchorage cupertino maui sealbeach uk travel origin destination possible traverse routemap dut contain following pipe interconnected hubs chicago dallas newark sanfran seattle control clock cycle represent hour travel layover time figure show route world interconnect figure routed world polar route anchorage waltham seattle chicago noida uk maui sanfran newark cupertino sealbeach dallas legend hub origins destinations hubs pipe travel time anchorage cupertino noida sealbeach uk waltham anchorage cupertino maui sealbeach uk chicago dallas newark sanfran seattle origin destination origdest number show direct arc travel time hour travel indicate pipe layover time hub hour routemap initialize inject teachroute message entire system waltham origin transactor teachroute message contain piece routing information address particular hub load route routetable module figure page simple mechanism software routeconfig model progressively teach hub route waltham turn pass additional teachroute token hub distant waltham word teach close hub routemap learn pass route bind distant hub process continue entire mesh initialize point ready serve backbone air travel activity initiate route configuration testbench execute itinerary passenger period day itinerary consist leg schedule departure specify origin specify destination schedule leg send message token designate origin transactor job transactor count number clock specify departure time send token routemap mesh system hierarchy hierarchy system textually show following subsection software hierarchy system testbench calendar clockadvancer scheduler origdest origin destination routeconfig scemidispatcher note interaction show calendar scheduler software model origdest origin destination hardware model interaction occur sce mi message channel hardware hierarchy follow hierarchy hardware component instantiate bridge netlist bridge scemiclockport origdest anchorage cupertino sealbeach uk origin scemimessageinport scemiclockcontrol destination scemimessageoutport scemiclockcontrol origin noida waltham destination maui routemap hub chicagohub dallashub newarkhub sanfranhub seattlehub funnel nozzle routetable pipe clockadvancer scemimessageinport scemimessageoutport scemiclockcontrol notice bridge level scemiclockport macro transactor component dut appear encapsulate origin destination transactor scemimessageinport scemimessageoutport scemiclockcontrol macro clockadvancer transactor message input output port addition require scemiclockcontrol macro hardware bridge bridge hardware software design depict figure notice diagram follow structure generalized abstraction bridge show figure page design use message channel message input output calendar clockadvancer connection message input channel scheduler origin connection output channel scheduler destination connection figure bridge software model calendar advancecalendar transactor newday advanceclock clockadv message port proxy message channel message port clock advancer todaysdate dut software model interact hardware calendar model scheduler model model encapsulate message port proxy direct access message channel lead origin destination transactor hardware software model one aware sce mi link converse model systemc abstract ports scheduler todaysdate announce arrival anchorage message port proxy message port anchorage origdest scheduleleg routemap proxy loadroute noida message port proxy message port noida destination uk message port proxy message port uk origdest routemap hardware set origin destination transactor service message channel interface scheduler route token dut location anchorage uk origin destination call origdest addition clockadvancer transactor interface directly calendar model clockadvancer stand transactor converse dut job allow time advance day time section page detail dut transactor interconnect figure show representative portion routemap interconnect dut component form routemap mesh figure dut transactor interconnect anchorage origdest pipe seattle origin tokenout hub destination tokenin funnel in0 in1 in2 in3 nozzle out0 out1 out2 out3 pipe pipe destination tokenin seattle anchorage maui pipe insert hub origin destination transactor hub long pipe create cascade primitive hour pipe form proper length pipe primitive represent hour travel clock diagram pipe4 model insert seattle hub maui destination hour flight leg travel occur direction anchorage seattle pipe5 insert direction dut transactor component figure show structure dut transactor component figure dut transactor component transactor component dut component tokenin destination tokenout origin clockcontrol messageout port clockcontrol messagein port hub nozzle tokenout0 tokenout1 tokenout2 tokenout3 tokenin funnel tokenin0 tokenin1 tokenin2 tokenin3 tokenout routetable routemap dut terface clockadvancer messageout port clock control messagein port pipe tokenin tokenout token format passenger arrival token passenger departure token teachroute token destination hub learn route associate port passenger destination layover count layover origin layover layover passenger destination time departure origin transactor contain clock control macro message input port macro receive departure token scheduler software receive token pass tokenout port schedule departure time mature origin transactor clock control macro actively control clock use clock control macro monitor readyforcclock signal know uclock cclock active properly count cclock schedule departure time pende departure token destination transactor contain clock control macro message output port macro send arrival token scheduler software arrival token represent passenger emerge routemap mesh arrive destination tokenin port section page detailed description destination transactor transactor choose describe detail provide simple example clock control message port interfacing token bit vector signal handshake system token self announce normally clock mesh give cycle hub destination sense non value input port know receive token need process token format show figure departure token contain passenger destination schedule time departure departure token travel mesh collect layover information consist id hub encounter reach destination having transform arrival token arrival token complete record layover information pass software display console hub consist funnel accept token different source nozzle route token different destination nozzle contain small routetable initialize beginning simulation routing information receive teachroute token destination transactor interface dut control clock destination transactor accept token arrive point exit routemap pass message output port destination transactor use clock control avoid lose potentially successive token arrive routemap tokenin input destination portal de assert readyforcclock event token come message output port able token simultaneously arrive destination portal way guarantee entire routemap disable token load request destination transactor verilog source code destination transactor show following listing module destination tokenin input tokenin wire destid reg message reg transmitready readyforcclock assign destid tokenin scemimessageoutport messageoutport input output transmitready transmitready receiveready receiveready message message scemiclockcontrol clockcontrol input output uclock uclock ureset ureset readyforcclock readyforcclock cclockenabled cclockenabled posedge uclock begin ureset begin readyforcclock message transmitready end begin dut clock disable mean destination transactor wait unload pende token want enable dut token load lose arrive token subsequent dut clock readyforcclock begin messageoutport portal finally signal acceptance token enable dut clock receiveready begin readyforcclock transmitready end end cclockenable destid begin message tokenin transmitready end end end endmodule token arrive portal ready stop assembly line disable dut receiveready readyforcclock clockadvancer transactor control time advance clockadvancer transactor simply count control clock request number cycle transpire send reply transaction verilog source code clockadvancer list module clockadvancer wire advancedelta messagein messageout reg cyclecount assign receivereadyin assign advancedelta messagein assign messageout scemimessageinport messageinport input output receiveready receivereadyin transmitready transmitreadyin message messagein scemimessageoutport messageoutport input output transmitready transmitreadyout receiveready receiveready message messageout scemiclockcontrol clockcontrol input output uclock uclock ureset ureset readyforcclock readyforcclock cclockenabled cclockenabled posedge uclock begin ureset begin transmitreadyout cyclecount readyforcclock end begin receive clock advance command initialize cycle counter transmitreadyin transmitreadyout begin cyclecount advancedelta readyforcclock end decrement cycle count count get prepare send response time expire readyforcclock cclockenabled begin cyclecount begin transmitreadyout readyforcclock end end cyclecount cyclecount receivereadyout transmitreadyout end end endmodule notice scemiclockcontrol macro reference cclock destination transactor use default clocknum mean clockadvancer destination transactor share control cclock fact cclock entire system specify default ratio notice clockadvancer handshake message output port datum send thing software need clockadvancer cycle stamp automatically include message output response page software software route design write completely systemc compile executable program link sce mi software system model interconnect systemc module system model level software netlist systemc module sc module specify construction interconnect component model block diagram system model show figure figure interconnect systemc model testbench architecture newday test bench advancecalendar calendar message channels announcearrival scheduleleg loadroutemap advancecalendar advanceclock newday todaysdate scheduler todaysdate announcearrival scheduleleg loadroute erviceloop scemi routeconfig loadroutemap loadroute advanceclock scemi dispatcher follow source code system model sc module system sc link mp newday sc link mp announcearrival sc link mp advancecalendar sc link mp scheduleleg sc link mp loadroutemap sc link mp sc link mp advanceclock sc link mp todaysdate sc link mp loadroute module declaration testbench testbench calendar calendar scheduler scheduler routeconfig routeconfig scemidispatcher dispatcher sc ctor system testbench new testbench testbench testbench newday newday testbench announcearrival announcearrival testbench advancecalendar advancecalendar testbench scheduleleg scheduleleg testbench loadroutemap loadroutemap testbench calendar new calendar calendar calendar advancecalendar advancecalendar calendar advanceclock advanceclock calendar newday newday calendar todaysdate todaysdate scheduler new scheduler scheduler scheduler todaysdate todaysdate scheduler scheduleleg scheduleleg scheduler loadroute loadroute scheduler announcearrival announcearrival routeconfig new routeconfig routeconfig routeconfig loadroutemap loadroutemap routeconfig loadroute loadroute routeconfig advanceclock advanceclock dispatcher new scemidispatcher dispatcher dispatcher systemc interconnect channel declare sc link mp datum type think abstract signal interconnect abstract port parametrize data type associate sc link mp denote data type message channel capable transfer output abstract port input abstract port notice todaysdate channel declare value datum type route ate channel announcearrival declare reference datum type const route arrivalrecord efficient safe message pass value danger receiver corrupt sender datum worse have sender datum scope leave receiver possibly dangle reference pass message reference efficient care take use declare const pointer help alleviate safety problem module pointer declare inside sc module system object construct systemc constructor sc ctor system child module construct abstract port map declare interconnect channel important stress systemc channel conceptually distinctly different sce mi message channel type channel pass message systemc channel design strictly pass message arbitrary datum type systemc module entire simulation build software model communicate reference detail systemc interconnect channel sce mi message channel completely different interface optimize implement abstraction bridge software subsystem hardware subsystem use model present example interface encapsulate systemc model thick round arrow figure represent systemc autonomous thread contain testbench scemidispatcher module thread autonomous thread system code execute inside slave thread sc main routine error handler follow listing show sc main routine level entrypoint program sc main require link systemc kernel facility like conventional main entrypoint program argument pass semantic static void errorhandler void context scemiec ec char buf sprintf buf int ec type string messagetext sce mi error messagetext buf messagetext function messagetext ec culprit messagetext messagetext ec message throw messagetext int sc main int argc char argv scemi registererrorhandler errorhandler null scemi scemi null try scemiparameters parameter param scemi scemi scemi init parameter system system system instantiate system establish proper binding sce mi module directly interact system dispatcher bind scemi system calendar bind scemi system scheduler bind scemi kick systemc kernel cerr let er rip endl sc start catch string message cerr message endl cerr fatal error program abort endl scemi hutdown scemi return catch cerr error unclassified exception endl cerr fatal error program abort endl scemi hutdown scemi return return routine define errorhandler master error handling function register sce mi error occurs function call format message throw exception exception catch catch block end sc main routine display exit program error handler register sce mi initialize call scemi init method return pointer scemi object manage sce mi software infrastructure system model describe previous section construct constructor sc ctor system cause child software model construct call turn sc ctor constructor system statically construct model interface sce mi give master scemi object pointer access method call special bind accessor method model finally systemc main kernel loop initialize call sc start function parameter tell indefinitely program decide end program end explain section scemidispatcher module interface sce mi service loop scemidispatcher module contain autonomous thread yield sce mi infrastructure service message port proxy make repeated call scemi erviceloop method section page place logic dedicated thread model system worry yield sce mi follow source code scemidispatcher sc module scemidispatcher sc slave private context declaration scemi dscemi thread declaration void dispatchthread autonomous scemi dispatcher thread void donethread scemi hutdown dscemi exit normal exit public accessor void bind scemi scemi dscemi scemi sc ctor scemidispatcher thread binding sc thread dispatchthread sensitive utick sc slave donethread void scemidispatcher dispatchthread dispatcher call scemi dispatcher poll function return wait dscemi serviceloop service loop autonomous thread yield thread system call wait function actually autonomous thread route system testbench model thread represent thick round arrow figure page job scemidispatcher shut system detect notification port simulation complete inslave port bind slave thread donethread construction port drive associate outmaster port testbench module testbench ultimately decide simulation complete section application specific datum type route system following data type define route hxx header file reference subsequent discussion data type specific application class route public typedef enum parameter numpassenger numlocation messagesize typedef enum passengerid bugsbunny daffyduck elmerfudd sylvesterthecat typedef enum locationid location origin destination hub unspecified anchorage chicago cupertino dallas maui newark noida sanfran sealbeach seattle uk waltham typedef struct itinerary unsigned dateoftravel unsigned timeofdeparture passengerids passengerid locationids originid locationids destinationid typedef struct arrivalrecord passengerids passengerid unsigned dateofarrival unsigned timeofarrival unsigned layovercount locationids originid locationids layoverids locationids destinationid typedef struct route locationids routerid locationids destinationid unsigned portid typedef struct date scemiu64 cyclestamp unsigned day testbench model main control loop testbench model contain systemc autonomous thread serve main driver route design job look passenger itinerary schedule leg itinerary appropriate date appropriate departure time interact scheduler model condensed source code passenger itinerary declaration testbench model follow const route itinerary route bugsestrip day depart enroute bugsbunny anchorage cupertino bugsbunny sealbeach maui bugsbunny unspecified unspecified const route itinerary route affystrip day depart enroute daffyduck waltham cupertino daffyduck cupertino sealbeach daffyduck cupertino maui daffyduck unspecified unspecified const route itinerary route elmerstrip day depart enroute elmerfudd sealbeach anchorage elmerfudd cupertino maui elmerfudd unspecified unspecified const route itinerary route ylvesterstrip day depart enroute sylvesterthecat noida sealbeach sylvesterthecat sealbeach cupertino sylvesterthecat anchorage maui sylvesterthecat unspecified unspecified static const char passengernames bugsbunny daffyduck elmerfudd sylvesterthecat static const char locationname unspecified anchorage chicago cupertino dallas maui newark noida sanfran sealbeach seattle uk waltham passenger itinerary give list route itinerary record record represent leg passenger journey consist date departure time departure passenger origin destination passengername locationname string use printing message follow systemc module definition sc module testbench model standard systemc constructor sc ctor sc module testbench abstract port declaration sc master loadroutemap sc master sc outmaster advancecalendar sc inslave newday sc outmaster scheduleleg sc inslave announcearrival private context declaration unsigned dnummauiarrival unsigned ddaynum const route itinerary ditinerarie route numpassenger thread declaration void driverthread autonomous master thread void newdaythread ddaynum newday void announcearrivalthread helper declarations public sc ctor testbench dnummauiarrivals ddaynum thread binding autonomous thread form main body route driver sc thread driverthread sensitive utick sc slave newdaythread newday sc slave announcearrivalthread announcearrival initialize itinerary pointer ditinerarie route bugsestrip ditinerarie route affystrip ditinerarie route elmerstrip ditinerarie route ylvesterstrip follow autonomous thread main driver loop void testbench driverthread loadroutemap signal routeconfig model begin configuration routemap unsigned daynum ddaynum advancecalendar advance day wait wait day advance newday arrive daynum ddaynum unsigned date mindate check itinerary passenger travel today advance calendar tomorrow case leg itinerary tomorrow int idateoftravel date ddaynum cout day setw ddaynum setw ditineraries timeofdeparture hr passengernames ditineraries passengerid depart locationnames ditineraries originid enroute locationnames ditineraries destinationid endl scheduleleg ditineraries mindate ddaynum date mindate mindate date daynum ddaynum advancecalendar mindate ddaynum enter main loop autonomous driverthread thing signal loadroutemap outmaster port trigger routeconfig model teach route routetable hub routemap teach route inject hardware stagger clock small clock advance achieve routeconfig model signal advanceclock port calendar model passenger travel routemap possible hub properly program route route teach routemap calendar advance day turn cause calendar model announce arrival day newday inslave port day change detect driverthread enter loop schedule travel itinerary schedule current day travel schedule advance calendar day travel schedule occur leg itinerary schedule send itinerary record scheduleleg outmaster port scheduler model encode token send hardware operation continue leg itinerary passenger travel leg trip finally arrive maui destination serve termination condition convey scemidispatcher model signal outmaster port code announcearrivalthread receive notification scemidispatcher model gracefully shut sce mi exit program normal exit status testbench model announce arrival passenger destination occur announcearrivalthread slave thread detect arrival receive arrivalrecord announcearrival inslave port send message output port proxy receive callback scheduler print arrival information console follow source code void testbench announcearrivalthread const routed arrivalrecord arrivalrecord announcearrival cout day setw arrivalrecord dateofarrival setw arrivalrecord timeofarrival hr passengernames arrivalrecord passengerid arrive locationnames arrivalrecord destinationid locationnames arrivalrecord originid layover unsigned ilayovercount cout locationnames arrivalrecord layoverids cout endl check termination condition arrivalrecord destinationid route maui dnummauiarrivals route numpassengers cout arrive maui let party endl signal dispatcher simulation end scheduler module interface message port proxy follow systemc module definition constructor scheduler model sc module scheduler abstract port declaration sc inmaster todaysdate sc inslave scheduleleg sc inslave loadroute sc outmaster announcearrival private context declaration scemimessagedata dsenddata scemimessageinportproxy doriginanchorage scemimessageinportproxy dorigincupertino scemimessageinportproxy doriginnoida scemimessageinportproxy doriginsealbeach scemimessageinportproxy doriginuk scemimessageinportproxy doriginwaltham scemimessageoutportproxy ddestinationanchorage scemimessageoutportproxy ddestinationcupertino scemimessageoutportproxy ddestinationmaui scemimessageoutportproxy ddestinationsealbeach scemimessageoutportproxy ddestinationuk routed arrivalrecord darrivalrecord thread declaration void schedulelegthread void loadroutethread helper declaration static void replycallback void context const scemimessagedata datum void announcearrival scemiu64 cyclestamp scemiu32 arrivaltoken public void bind scemi scemi sc ctor scheduler dsenddata route messagesize doriginanchorage null dorigincupertino null doriginnoida null doriginsealbeach null doriginuk null doriginwaltham null ddestinationanchorage null ddestinationcupertino null ddestinationmaui null ddestinationsealbeach null ddestinationuk null sc slave schedulelegthread scheduleleg sc slave loadroutethread loadroute slave thread define model schedulelegthread loadroutethread loadroutethread describe detail responsible send teachroute token routemap mesh waltham origin transactor routemap configure beginning simulation thread activate time routeconfig module want teach new route loadroutemap operation schedulelegthread activate scheduler receive route itinerary message scheduleleg inslave port testbench model send leg encode departure token message input channel designate origin transactor scheduler pointer message input port proxy connect origin transactor departure token encode passenger destination route itinerary record follow source code schedulelegthread void scheduler schedulelegthread const route itinerary leg scheduleleg form passenger departure token base content give itinerary record scemiu32 passengerdeparturetoken leg passengerid leg destinationid leg originid leg timeofdeparture dsenddata set passengerdeparturetoken switch leg originid case route anchorage doriginanchorage send dsenddata break case route cupertino dorigincupertino send dsenddata break case route noida doriginnoida send dsenddata break case route ealbeach doriginsealbeach send dsenddata break case route uk doriginuk send dsenddata break case route waltham doriginwaltham send dsenddata break default assert scheduler bind method call prior simulation sc main routine section figure page sce mi message input output port proxy lead origin destination transactor bind notice output port proxy output receive callback replycallback specify binding structure section page information message output port bind void scheduler bind scemi scemi establish message input portals doriginanchorage scemi bindmessageinport anchorage tokenin dorigincupertino scemi bindmessageinport cupertino tokenin doriginnoida scemi bindmessageinport noida tokenin doriginsealbeach scemi bindmessageinport sealbeach tokenin doriginuk scemi bindmessageinport uk tokenin doriginwaltham scemi bindmessageinport waltham tokenin establish message output portals scemimessageoutportbinding bind replycallback null ddestinationanchorage scemi bindmessageoutport anchorage tokenout bind ddestinationcupertino scemi bindmessageoutport cupertino tokenout bind ddestinationmaui scemi bindmessageoutport maui tokenout bind ddestinationsealbeach scemi bindmessageoutport sealbeach tokenout bind ddestinationuk scemi bindmessageoutport uk tokenout bind scheduler responsible processing arrival calendar advanced arrival occur time course hour clock arrival token send destination transactor message output port scheduler sce mi infrastructure dispatch arrive message replycallback function register bind method describe replycallback function turn pass message private announcearrival method describe follow code replycallback function void scheduler replycallback void context const scemimessagedata datum scheduler context announcearrival datum cyclestamp datum announcearrival method process arrival token convert encode arrival token route arrivalrecord datum type stamp todaysdate output calendar send announcearrival outmaster port testbench model display arrival information console follow void scheduler announcearrival scemiu64 cyclestamp scemiu32 arrivaltoken route ate todaysdate todaysdate read today date calendar darrivalrecord dateofarrival todaysdate day darrivalrecord timeofarrival cyclestamp todaysdate cyclestamp darrivalrecord passengerid route assengerid arrivaltoken xf darrivalrecord destinationid route locationids arrivaltoken xf darrivalrecord originid route locationid arrivaltoken xf darrivalrecord layovercount arrivaltoken xf assert darrivalrecord layovercount arrivaltoken unsigned announcearrival darrivalrecord arrival record pass reference calendar module interface clock advancer calendar model responsible advance time routemap day time set schedule departure program origin transactor departure schedule particular day calendar allow dut advance clock hour multiple clock schedule departure occur day calendar advance time send message clockadvancer transactor hardware direct control dut clock clockcontrol macro source code calendar module similar structure scheduler show calendar model slave thread respond request advance time advancecalendarthread respond request advancecalendar port advance give number day advanceclockthread respond request advance clock time occur routemap configuration stagger injection teachroute token clock method follow void calendar advanceclockthread dsenddata set tell clockadvancer advance clock dinputport send dsenddata send message port proxy pend cycle stamp get update output port proxy reply callback scemiu64 currentcyclestamp dcyclestamp dcyclestamp currentcyclestamp wait notice method enter loop call wait yield systemc kernel reason want guarantee clock complete advance return yield systemc kernel wait condition autonomous scemidispatcher thread section page naturally give chance service message output port necessary reach condition advanceclockthread wait calendar dcyclestamp datum member change value dcyclestamp change value clockadvancer hardware respond output port complete clock time advance turn cause calendar replycallback function call scemi erviceloop replycallback function follow void calendar replycallback void context const scemimessagedata datum calendar context dcyclestamp datum cyclestamp cycle stamp update directly cyclestamp method scemimessagedata object reflect count elapse control clock count occur beginning simulation time message send hardware convenient way software track elapse clock time hardware dcyclestamp update wait loop advanceclockthread describe release function return mind advanceclockthread replycallback function call different autonomous thread frequently yield call autonomous testbench driverthread call ultimately scemi erviceloop function call underneath autonomous scemidispatcher dispatchthread illustrate clean interaction general multi threaded application software environment sce mi service loop formal functional specification hardware interface macro dual ready protocol message port macro hardware use general pci like dual ready protocol go detail macro work dual ready handshake protocol use explain section waveform figure depict dual ready handshake scenario figure dual ready handshake protocol ureset uclock transmitready receiveready message d3 d2 d6 d5 d4 d1 receiver ready d1 st clock reset d1 arrive move receiver ready d2 d2 arrive move receiver ready d3 arrive move receiver ready d7 d6 arrive move receiver ready d6 receiver ready d5 move d5 arrive d4 arrive receiver ready d4 move briefly dual ready handshake work follow transmitter assert transmitready clock cycle datum de assert receiver assert receiveready cycle ready datum de assert clock cycle transmitready receiveready assert datum move mean take receiver dual ready protocol following advantage signal level base easily sample posedge clock logic transmitready receiveready stay assert sequence datum clock cycle performance realize example toggle base protocol scemimessageinport macro scemimessageinport macro present message arrive software channel transactor macro consist handshake signal play dual ready protocol data bus present message figure show symbol scemimessageinport macro verilog vhdl source code macro wrapper figure scemimessageinport macro verilog macro wrapper scemimessageinport transmitready receiveready message module scemimessageinport input output receiveready transmitready message parameter portwidth input receiveready output transmitready output portwidth message endmodule vhdl macro wrapper entity scemimessageinport generic portwidth natural port receiveready std logic transmitready std logic message std logic vector portwidth downto end architecture emptymacro scemimessageinport begin end parameter signal portwidth message width bit derive setting parameter portname port derive instance label receiveready value signal indicate transactor ready accept datum software assert signal hardware indicate software location datum arrive message input port new message arrive indicate transmitready receiveready true location consume figure page happen notification send software new location available trigger input ready callback occur software section page section explain detail input ready propagation notification respect timing transmitready receiveready handshake note possible transactor utilize receiveready input ready callback case receiveready input permanently assert tie high software input ready callback register case transmitready merely act strobe arrive message transactor design arrive datum immediately guarantee hold subsequent uclock cycle transmitready value signal sample posedge uclock indicate channel message datum ready transactor receiveready assert transmitready remains assert clock receiveready finally assert clock datum move message arrive software transmitready de assert message vector signal constitute payload datum message input ready propagation software client code register input ready callback bind message input port proxy section page hardware infrastructure notify software time ready input time notify port proxy software make user register input ready callback mechanism call input ready propagation prototype input ready callback follow void isready void context function call software model assume message send message input port proxy transmission message input port hardware context argument pointer user define object presumably software model bind proxy important point note totally application follow protocol transactor ready receive input software model send behave software model know send receive input ready callback assume input ready propagation mechanism deploy sce mi infrastructure enforce idea transactor want ready input assert receiveready input scemimessageinport cause input ready callback call software time erviceloop enter software model typically set flag consult later outside erviceloop indicate transactor ready input case choose send right inside callback point send software model time immediately defer input ready callback receive second point fine application service output callback desire pende input callback word software model outer loop check status application define oktosend flag iteration skip send flag false suppose application outer loop repeatedly call erviceloop check arrive output message input ready notification callback function set flag context outer loop use know output message arrive need processing input port need input possible input ready callback get call outer loop call erviceloop time time result output message callback subsequent processing output message finally st time erviceloop call input ready callback call set oktosend flag context outer loop detect new flag status initiate send input channel handshake waveform figure page intend purely illustrate semantic dual ready protocol couple reason waveform realistic actual implementation scemimessageinport macro input ready propagation enable optional callback register software sender software expect input ready notification transmit message message transmitready assertion consecutive clock impossible second input ready callback register give port timing physical layer sce mi bridge successive transmission possible software end batch consecutive message transmission hardware say hardware transactor design anticipate scenario likely happen waveform show figure typical input ready callback enable show possible scenario input ready notification occur figure scemimessageinport handshake waveform input ready propagation ureset uclock d3 d2 d1 transmitready receiveready message st input ready d1 propagate reset d1 arrive move input ready d2 propagate d2 arrive move input ready d3 propagate d3 arrive move input ready d4 propagate depict scenario input ready notification propagate software receiveready transactor assert clock follow reset receiveready transactor transition receiveready transactor remains assert clock follow transfer occur assertion transmitready receiveready scemimessageoutport macro scemimessageoutport macro allow transactor send message software like scemimessageinport macro use dual ready handshake case transmitter transactor receiver sce mi interface transactor number scemimessageoutport macro instance figure show symbol scemimessageoutport macro verilog vhdl source code macro wrapper figure scemimessageoutport macro verilog macro wrapper module scemimessageoutport input output scemimessageoutport transmitready receiveready message transmitready receiveready message parameter portwidth parameter portpriority input transmitready output receiveready input portwidth message endmodule vhdl macro wrapper entity scemimessageoutport generic portwidth natural portpriority natural port transmitready std logic receiveready std logic message std logic vector portwidth downto end architecture emptymacro scemimessageoutport begin end parameter signal portwidth message width bit derive setting parameter portpriority priority determine output message send output channel arrive uclock section page detail meaning parameter portname port derive instance label transmitready value signal indicate transactor message datum ready output channel receiveready assert transmitready remain assert clock receiveready finally assert clock datum move transactor message transmission de assert transmitready receiveready value signal sample uclock posedge indicate output channel ready accept datum transactor assert signal sce mi hardware indicate transactor output channel location data destine software channel cycle transmitready receiveready assert transactor assume datum move subsequent cycle receiveready remains assert mean new location available transactor load time assert transmitready message datum arrival software trigger receive callback message output port proxy section page message vector signal constitute payload datum message originate transactor send software channel scemiclockport macro scemiclockport macro supply control clock dut scemiclockport macro parametrize instance scemiclockport fully specify control clock give frequency phase shift duty cycle scemiclockport macro supply control reset duration specify number cycle cclock figure show symbol scemiclockport macro verilog vhdl source code macro wrapper figure scemiclockport macro verilog macro wrapper module scemiclockport input output cclock creset parameter clocknum scemiclockport cclock creset parameter rationumerator ratiodenominator parameter dutyhi dutylo phase parameter resetcycle endmodule vhdl macro wrapper entity scemiclockport generic clocknum natural rationumerator natural ratiodenominator natural dutyhi natural dutylo natural phase natural resetcycles natural port cclock std logic creset std logic end architecture emptymacro scemiclockport begin end note clock parameter default value simple system control clock need exactly instance scemiclockport instantiate level parameter specify result single control clock ratio care duty cycle discussion duty cycle section page phase shift ideally clock frequency match uclock cycle enable sce mi infrastructure implicitly create control clock ratio high frequency control clock system visible user design depend scemiclockport ratio explicitly declare instantiate complex system require multiple clock scemiclockport instance create require clock clock ratio specify instantiation parameter specify frequency clock ratio relative high frequency control clock system ratio explicitly implicitly define example cclock define ratio interpret edge cclock edge cclock divide clock parameter signal clocknum parameter assign unique number clock differentiate scemiclockport instance consider error infrastructure linker scemiclockport instance share clocknum default clocknum rationumerator ratiodenominator parameter constitute numerator denominator respectively clock ratio numerator designate number cycle fast control clock occur number cycle clock specify denominator example rationumerator ratiodenominator clock specify mean cycle clock occur cycle clock occur default clock ratio dutyhi dutylo phase duty cycle express arbitrary integer normalize sum sum dutyhi dutylo represent number unit cycle clock example dutyhi dutylo high time clock unit period similarly low time period phase shift express unit phase mean clock shift period low high transition occur default duty cycle show macro wrapper figure care duty cycle section page resetcycle parameter specify cycle control clock occur control reset transition initial value clockname clock port derive instance label cclock control clock signal supply dut sce mi infrastructure macro clock characteristic derive parameter specify instantiation macro creset control reset signal supply dut sce mi infrastructure macro derive clock ratio frequency way specify clock ratio enter directly frequency normalize clock high frequency specify ratio way require following ratio numerator equal high frequency use consistent unit ratio omit unit simply state integer example suppose system mhz mhz mhz mhz khz clock specify ratio frequency directly enter integer khz unit omit fast clock user like think frequency ratio use simple technique possible implementor sce mi api wish provide tool assist derive clock ratio frequency tool allow user enter clock specification term frequency generate set equivalent ratio addition tool post process waveform vcd file generate simulation way define clock appear waveform display exact frequency give user care duty cycle default duty cycle show macro wrapper figure care duty cycle user specify care posedge cclock care negedge fall know posedge active care duty cycle case dutyhi give dutylo give arbitrary number unit phase offset express percentage period dutyhi dutylo example user specify combination dutyhi dutylo phase user say following care duty cycle specifically care negedge clock fall total period express unit phase shift unit represent phase shift example dutyhi dutylo phase say care interval duty cycle duty cycle phase shift period express unit possible negedge active care duty cycle case dutylo parameter give dutyhi give positive number example dutyhi dutylo phase mean care duty cycle specifically care posedge clock fall phase shift clock specification consider error phase dutyhi dutylo control reset semantic creset output scemiclockport macro obey following semantic creset start low deasserted transition high uclock later remain high assert minimum duration specify resetcycle parameter adorn scemiclockport macro duration express number edge associate cclock follow reset duration creset low deasserte remain low remain duration simulation application require edge reset beginning simulation multiple cclock reset duration minimum length guarantee span resetcycle parameter clock word control reset duration clock mininum max resetcycle cclock1 resetcycle cclock2 implementation chose use reset duration large quantify show require achieve proper alignment multiple cclock edge control reset describe section page assertion creset cclock edge force regardless state readyforcclock input scemiclockcontrol macro reset duration complete cclock control normally readyforcclock input note operation control reset describe provide default control reset behavior generate scemiclockport macro sophisticated reset handling require implement specially write reset transactor lieu simpler control reset come scemiclockport instance example software control reset require application need create reset transactor respond special software originate reset command arrive message input port multiple cclock alignment general cclock align rise uclock edge follow trailing edge creset uclock edge refer point alignment cclock phase mean rise edge clock coincide point alignment cclock phase edge occur time point alignment figure show assortment cclock uclock creset show cclock behave point alignment diagram cclock1 cclock2 cclock3 phase rise edge point alignment cclock4 duty cycle cclock2 phase shift rise edge occur uclock cycle point alignment starting value point alignment cclock5 duty cycle cclock3 phase rise edge occur cycle point alignment notice starting value point alignment alternatively think inverted phase anytime phase great initial duty cycle interval start value point alignment figure multi clock alignment creset ratio duty cycle phase ratio duty cycle phase ratio duty cycle phase ratio duty cycle phase ratio duty cycle phase point alignment uclock cclock1 cclock2 cclock3 cclock4 cclock5 scemiclockcontrol macro scemiclockport macro instance counterpart scemiclockcontrol macro instance presumably encapsulate transactor scemiclockcontrol macro mean transactor control dut clock sce mi infrastructure indicate transactor uclock cycle control clock edge figure show symbol scemiclockcontrol macro verilog vhdl source code macro wrapper figure scemiclockcontrol macro verilog macro wrapper c1 module scemiclockcontrol scemiclockcontrol uclock ureset readyforcclock cclockenabled readyforcclocknegedge cclocknegedgeenabled input output uclock ureset readyforcclock cclockenabled readyforcclocknegedge cclocknegedgeenabled parameter clocknum output uclock ureset input readyforcclock output cclockenabled input readyforcclocknegedge output cclocknegedgeenabled endmodule vhdl macro wrapper entity scemiclockcontrol generic clocknum natural port uclock ureset std logic readyforcclock std logic cclockenable std logic readyforcclocknegedge std logic cclocknegedgeenabled std logic end architecture emptymacro scemiclockcontrol begin end scemiclockport define system correspond scemiclockcontrol macro instantiate transactor addition provide uncontrolled clock reset macro provide handshake provide explicit control edge generate cclock parameter signal clocknum parameter give scemiclockcontrol macro parameter associate scemiclockcontrol instance counterpart scemiclockport instance define level default clocknum note associate instance scemiclockcontrol exactly instance system scemiclockport instance scemiclockport instance scemiclockcontrol scemiclockcontrol instance identify scemiclockport associate properly specify clocknum parameter match associate scemiclockport uclock uncontrolled clock signal generate sce mi infrastructure ureset uncontrolled reset generate sce mi infrastructure signal high beginning simulate time transition low arbitrary implementation dependent number uclock later reset transactor note uncontrolled reset duration span long control reset creset output scemiclockport section page measure uclock guarantee dut transactor properly wake initialize state uclock follow expiration control reset readyforcclock input macro indicate sce mi infrastructure transactor willing allow associate dut clock advance transactor de assert signal need perform operation dut freeze useful application feature perform complex algorithmic operation data content transaction present dut input scemiclockcontrol instance associate give control clock deasserte posedge cclock disable react readyforcclock slow clock infrastructure prematurely disable posedge fast clock occur prior possible uclock precede edge disable word edge disable time allow fast clock activity proceed moment possible edge finally disable posedge control clock disable readyforcclocknegedge similarly negedge control input scemiclockcontrol instance associate give control clock deasserte negedge clock disable react readyforcclocknegedge slow clock infrastructure prematurely disable negedge fast clock occur prior possible uclock precede edge disable word edge disable time allow fast clock activity proceed moment possible edge finally disable negedge control clock disable support explicit negedge control need transactor logic care control posedge clock inadvertently disable negedge clock intend disable posedge clock transactor care control negedge show figure page tie signal high cclockenabled macro output signal transactor posedge uclock posedge control clock transactor sample signal know dut clock edge occur sce mi infrastructure look readyforcclock transactor assert cclockenabled assert mean transactor stop clock system simply de assert readyforcclock note negedge active care duty cycle page user care posedge cclockenabled cclocknegedgeenable signal work like cclockenabled indicate negedge control clock occur posedge uclock useful transactor control double pump dut transactor care negedge control ignore signal note posedge active care duty cycle page user care negedge cclocknegedgeenabled infrastructure linkage content section strictly concern infrastructure implementor class user define section page end user transactor implementor assume operation describe automatically handle infrastructure linker describe section page infrastructure linkage process analyze user bridge netlist hardware compile form suitable run emulator involve expand interface macro infrastructure component add exist structure generate parameter information bind hardware software order determine information infrastructure linker analyze netlist search instance sce mi hardware macro read parameter value instance generate parameter file read software initialization properly bind message port proxy hardware typical infrastructure linker provide option form switch input configuration file allow user pass override implementation specific option craft infrastructure linker maximize ease use transparently provide end user suitable set default value implementation specific parameter parameter need override parameter following set parameter define minimum set need implementation sce mi standard specific implementation require additional parameter number transactor number transactor derive count number module user design contain scemiclockcontrol macro assume module officially consider transactor scemiclockcontrol instance immediately inside transactor transactor derive hierarchical path instance module qualify transactor definition naturally multiple instance give type transactor uniquely distinguish instance path name syntax express path hdl language bridge netlist express number message input output channel infrastructure linker derive number message input output port count instance scemimessageinport scemimessageoutport macro port port derive relative instance path port relative contain transactor module example path message input port macro instance verilog notation bridge u1 tx1 ip1 transactor bridge u1 tx1 port ip1 output port instantiate level input port path bridge u1 tx1 m1 op1 port m1 op1 instantiate level relative transactor root level pathname port derive concatenate transactor port hierarchical separator insert message input output port width width port bit derive portwidth parameter define message port macro width default override significantly large value point instantiation message output port priority priority message output port derive portprority parameter define scemimessageoutport macro certain implementation useful hint infrastructure linker decide output port service happen present message datum uclock implement number physical message channel limitless number virtual message channel user important care default value need override need specify instantiation statement exception output port priority generally follow semantic unix nice command follow allow priority value default priority value low number high priority output port priority reserve internal use infrastructure message output port priority number relative priority undetermined strictly artifact infrastructure linker implementation number control clock number derive count instance scemiclockport macro control clock control clock derive instance label path scemiclockport instance necessarily instantiate level user bridge netlist unique instance scemiclockport control clock ratio clock ratio determine rationumerator ratiodenominator parameter scemiclockport macro rationumerator designate number cycle fast control clock occur number cycle clock specify ratiodenominator page detail clock ratio control clock duty cycle phase duty cycle determine dutyhi dutylo phase parameter scemiclockport macro duty cycle express pair arbitrary integer dutyhi dutylo interpret follow sum dutyhi dutylo represent number unit period clock dutyhi represent number unit high time dutylo number unit low time similarly phase represent number unit clock phase shift relative reference cclock possible user specify care duty cycle page detail duty cycle phase control reset cycle duration control reset express term cclock cycle determine resetcycles parameter clockport macro parameter file parameter file automatically generate infrastructure linker analyze user supply netlist determine parameter identify previous section parameter file read software sce mi infrastructure facilitate binding operation occur software model construction automatically generate content syntax parameter file leave specific implementor sce mi content intend portable software parameter access api provide infrastructure implementor conform specification page access block support access specifically name set parameter require sce mi optional implementation specify set name parameter sce mi require parameter read value automatically determine infrastructure linker analyze user supply netlist implementation specific parameter read read write require implementation software interface api gain access hardware sce mi software initialize sce mi software infrastructure bind port proxy represent message port define hardware initialize sce mi involve instruct sce mi load parameter file generate infrastructure linker information parameter file give sce mi software mean establish rendezvous hardware response port binding call user software model rendezvous port binding achieve primarily association involve transactor name port name note clock name property identify parameter file little significance binding process information procedurally available application need parameter file api section page access software interface facilitate number class follow class scemiec class scemi class scemiparameters class scemimessagedata class scemimessageinportproxy class scemimessageoutportproxy primitive datum type addition datum type integer unsigned const char argument method api require unsigned data type specific width support following data type place header file api typedef unsigned int scemiu32 typedef unsigned long long scemiu64 miscellaneous interface issue class scemiec error handling note call interface scemiec ec argument usage argument consistent method error handling semantic explain detail section document error handling method api error handling sce mi design flexible use traditional style error handling error status return check callback base scheme register error handler call error occur enum scemierrortype scemiok scemierror struct scemiec const char culprit const char message scemierrortype type int typedef void scemierrorhandler void context scemiec ec static void scemi registererrorhandler scemierrorhandler errorhandler void context method register optional error handler sce mi call event error occur sce mi operation encounter error following procedure follow scemiec pointer pass function non null value scemiec structure fill errant appropriate information describe error control return caller think traditional approach error handling find application application code check error status api appropriate abortive action error detect scemiec pointer pass function null pass default null api function error handler register error handler call errant api error handler pass internally allocate scemiec structure fill error information error handler callback approach user define code handler initiate abort operation application catch throw mechanism deploy application simply abort exit function print log error information scemiec pointer pass function null error handler register scemiec structure construct pass default error handler default error handler attempt print message console log file call abort important note error handling facility support irrecoverable error mean error return scemiec object handler return object point continue co modeling session call support return recoverable error status return status separate dedicated return argument second point note message text fill error structure mean fully describe nature error log display console verbatim application error handling code culprit text errant api function optionally add message display log api return success fatal error status detailed nature error fully describe return error message scemierrortype enum value pertain success scemiok failure scemierror scemiec type return api function caller value depend success failure scemiec type pass error handler definition value scemierror error handler call place optional field classify different major error type tag distinct error message unique integer identifier class scemiic informational status warning handling info handling sce mi provide means convey warning informational status message application like error handling info handling callback function special structure convey warning information enum scemiinfotype scemiinfo scemiwarning sceminonfatalerror struct scemiic const char originator const char message scemiinfotype type int typedef void scemiinfohandler void context scemiic ic static void scemi registerinfohandler scemiinfohandler infohandler void context method register optional info handler sce mi call event warning informational status message occur sce mi operation encounter warning wish issue informational message following procedure follow info handler register info handler call api want issue warning info handler pass internally allocate scemiic structure fill warning information info handler callback approach user define code handler convey warning user manner appropriate application example display console log file info handler register scemiic structure construct pass default implementation define error handler default error handler attempt print message console log file implementation specific format important note message text fill error structure mean fully describe nature info message log display console verbatim application warning info handling code originator text api function detect message optionally add message display log scemiinfotype extra piece information indicate message warning informational status additional category call sceminonfatalerror log error condition lead fatal error final fatal error message log scemiec structure scemierrorhandler function abort sequence properly handle section page addition info message optionally tag unique identify integer specify field memory allocation semantic memory allocation semantic sce mi api following rule apply construct user user responsibility delete construct api api responsibility delete mean object scemimessagedata create application object constructor delete application long use object scemimessage portproxy object construct api hand application pointer object delete application delete entire interface shut scemi hutdown similarly non null scemiec structure pass function assume allocate delete application null scemiec pointer pass function error occur api allocate structure pass error handler responsible free class scemi sce mi software interface singleton object represent software sce mi infrastructure operation global interface perform method class version discovery static int scemi version const char versionstring method allow application query version prior initialize sce mi give good chance specify version compatible series call function compatible version find application pass version number correspond familiar sce mi respond version handle compatible query version handle pass initialization describe section give version string compatible version sce mi application interface return point application option abort fatal error attempt version know use process refer mutual discovery versionstring argument form obtain application code header file particular sce mi installation initialization static scemi scemi init int version scemiparameter parameter scemiec ec null constructor sce mi interface give access global method interface return argument pointer object class scemi method call version input argument version number return version method describe previous section error result version number compatible sce mi infrastructure access parameter input argument pointer parameter block object class scemiparameter initialize parameter file generate infrastructure linker section page description object obtain shutdown static void scemi hutdown scemi scemi scemiec ec null destructor sce mi infrastructure object call connection interface terminate mean graceful decoupling hardware software achieve termination close callback register application call message input port proxy bind scemimessageinportproxy scemi bindmessageinport const char transactorname const char portname const scemimessageinportbinding bind scemiec ec null search list input port learn parameter file generate infrastructure linkage name match transactorname portname argument find object class scemimessageinportproxy construct serve proxy interface port pointer construct object return caller serve future access port consider error match find transactorname portname argument uniquely identify specific message input port specific transactor hardware caller wish bind name path name describe page express syntax hdl language hardware bridge netlist express bind bind argument pointer object define follow struct scemimessageinportbinding void context void isready void context void close void context data member follow context application free use pointer purpose wish class scemi class scemimessageinportproxy interpret pointer store pass call isready close callback isready function pointer callback call input ready notification receive hardware signal okay send new message input port pointer give null sce mi assume port need deploy input ready notification particular channel page detailed description input ready callback close termination callback function pointer call destruction sce mi pointer optionally specify null message output port proxy bind scemimessageoutportproxy scemi bindmessageoutport const char transactorname const char portname const scemimessageoutportbinding bind scemiec ec null search list output port learn parameter file generate infrastructure linkage name match transactorname portname argument find object class scemimessageoutportproxy construct serve proxy interface port handle construct object return caller serve future access port consider error match find transactorname portname argument uniquely identify specific message output port specific transactor hardware caller wish bind name path name describe page express syntax hdl language hardware bridge netlist express bind bind argument pointer object define follow struct scemimessageoutportbinding void context void receive void context const scemimessagedata datum void close void context data member follow context application free use pointer purpose wish class scemi class scemimessageoutportproxy interpret pointer store pass call isready close callback receive function pointer receive callback call output message arrive port callback require output port proxy consider error function pointer give null page information receive callback process output message close termination callback function pointer call destruction sce mi pointer optionally specify null service loop typedef int scemiserviceloophandler void context bool pende int scemi erviceloop scemiserviceloophandler null void context null scemiec ec null main workhorse method yield cpu processing time sce mi single threaded multi threaded environment call method give sce mi opportunity service port proxy check arrive message message pending send inside sce mi dispatch input ready receive callback need underlie transport mechanism support port proxy respond relatively timely manner message enqueue input output port proxy message handle erviceloop advisable application function frequently return argument number output message arrive process erviceloop null check transfer perform dispatch return immediately non null enter loop perform transfer call return return loop call indication message pende pende flag context argument pointer pass context argument erviceloop context context argument pass function example function return erviceloop different way use function application like force return erviceloop process message erviceloop guarantee separate function message process fact possible force erviceloop return application message have function return return follow int void context bool pende return application force return erviceloop process message note case erviceloop block return message find pende basically erviceloop return matter case message message example function block erviceloop exactly message application use function erviceloop blocking mode default polling mode function write cause erviceloop block get message return message get make use pende argument function argument simply indicate message process write case int void context bool pende return pende true block message occur return process message example function block erviceloop message alternatively suppose application like erviceloop block message occur return currently pende message process application define haveprocessedatleast1message flag follow int haveprocessedatleast1message erviceloop give function flag address context haveprocessedatleast1message scemi serviceloop haveprocessedatleast1message define function follow int void context bool pending int haveprocessedatleast1message int context pende message kick loop previous message process block message arrive return haveprocessedatleast1message haveprocessedatleast1message return conclusion depend precisely type operation erviceloop desire function tailor accordingly class scemiparameter parameter access class provide generic api application code access interface parameter set describe section page basically initialize content parameter file generate infrastructure linkage provide accessor facilitate reading possibly overriding parameter value sce mi require parameter read value automatically determine infrastructure linker analyze user supply netlist implementation specific parameter read read write require implementation parameter scemiparameters object override object pass scemi init construct interface page override parameter effect parameter set format parameter file implementation specific set parameter require sce api method access conform specification describe section purpose access parameter set organize database attribute object object instance decorate set attribute express value pair zero instance object kind api provide simple accessor return number object give kind read write accessor describe allow read override attribute value specific object object database compose set necessary interface component interface sce mi infrastructure application example distinct object instance message port distinct object instance represent define clock system attribute object represent collectively parameter uniquely characterize dimension constitution interface component need particular application example system require input port output port distinct clock represent object parametrize port object width attribute clock object ratio duty cycle attribute etc object attribute precisely fully describe interface requirement application sce mi infrastructure follow table give minimal predefine set object attribute require sce mi additional object attribute add implementation example single implementation specific object represent entire sce mi infrastructure facility attribute singleton object set implementation specific parameter implementor sce mi need allow user specify detail attribute meaning section page object kind attribute attribute value type mean messageinport transactorname portname portwidth string string integer transactor enclose message input port message input port width message input port bit messageoutport transactorname portname portwidth portpriority string string integer integer transactor enclose message output port message output port width message output port bit priority message output port clock clockname rationumerator ratiodenominator dutyhi dutylo phase resetcycles string integer integer integer integer integer integer clock numerator fast clock cycle clock ratio denominator clock cycle clock ratio high cycle percentage duty cycle low cycle percentage duty cycle phase shift percentage duty cycle number control clock cycle reset clockbinding transactorname clockname string string transactor contribute control clock clock transactor help con trol simplicity value sign integer string value complex data type derive application code string value attribute definition object kind imply specific value type parameter set semantic accessor provide scemiparameter class directly provide information give table imply parameter easily derive application follow imply parameter determine clockbinding object indicate total number transactor clock control macro combination clockbinding object ascertain number distinct contributor control give clock number distinct transactor system number transactor system determine count number distinct transactorname encounter clockbinding object number control clock determine read number clock object numberofobjects accessor describe number input output port determine read number messageinport messageoutport object respectively addition following semantic characterize parameter set transactor name absolute hierarchical path name conform syntax hdl language bridge netlist express port name relative hierarchical path name relative enclose transactor conform syntax hdl language bridge netlist express clock name identifier path name conform identifier naming syntax hdl language bridge netlist express constructor scemiparameter cemiparameter const char paramsfile scemiec ec null constructor construct object contain default value parameter override setting find specify parameter file parameter specify user default value construct parameter override procedurally paramsfile file generate infrastructure linker contain parameter derive user hardware netlist pathname file pathname relative local directory destructor scemiparameters scemiparameters destructor parameter object accessor unsigned int scemiparameters numberofobjects const char objectkind scemiec ec null const accessor return number instance object specify objectkind int scemiparameters attributeintegervalue const char objectkind unsigned int index const char attributename scemiec ec null const const char scemiparameters attributestringvalue const char objectkind unsigned int index const char attributename scemiec ec null const accessor read return integer string attribute value void scemiparameters verrideattributeintegervalue const char objectkind unsigned int index const char attributename int value scemiec ec null void scemiparameters verrideattributestringvalue const char objectkind unsigned int index const char attributename const char value scemiec ec null accessor override integer string attribute value consider error attempt override object attribute show table section page implementation specific attribute designate read following argument description generally apply accessor show objectkind kind object attribute value access consider error pass unrecognized objectkind accessor index index instance object attribute value access consider error index number return numberofobjects accessor attributename attribute value read overwrite consider error attributename identify attribute allow give objectkind value return pass value attribute read override respectively overloaded variant accessor provide string value integer value class scemimessagedata message datum object class scemimessagedata represent vector message datum transfer scemimessageinportproxy software associate scemimessageoutport hardware scemimessageoutport hardware associate scemimessageoutportproxy software message datum payload represent fix length array scemiu32 datum word large contain bit vector transfer hardware message port example message port width bit follow diagram show bit organize data array contain inside scemimessagedata object scemimessage port message bit scemimessagedata word scemimessagedata word scemimessagedata word constructor scemimessagedata cemimessagedata const scemimessageinportproxy messageinportproxy scemiec ec null construct message datum object size match width specify input port construct message datum object send port identical size error result destructor scemimessagedata scemimessagedata destruct object free datum array accessor unsigned int scemimessagedata widthinbit const return width message term number bit unsigned int scemimessagedata widthinword const return size data array term number scemiu32 word void scemimessagedata et unsigned int scemiu32 word scemiec ec null set word element array word void scemimessagedata etbit unsigned int int bit scemiec ec null set bit element message vector bit error widthinbit void scemimessagedata etbitrange unsigned int unsigned int range scemiu32 bit scemiec ec null set range bit element lsb start bit element message vector value bit error range widthinbit scemiu32 scemimessagedata unsigned int scemiec ec null const return word slot array error widthinwords int scemimessagedata getbit unsigned int scemiec ec null const return value bit element message vector error widthinbit scemiu32 scemimessagedata getbitrange unsigned int unsigned int range scemiec ec null const return value range bit element lsb start message vector error range widthinbit scemiu64 scemimessagedata cyclestamp const sce mi support feature call cycle stamping output message send software stamp number cycle control clock elapse beginning emulation time provide convenient way application track elapse cycle respective transactor simulation proceed return value absolute bit unsigned quantity class scemimessageinportproxy class scemimessageinportproxy present application proxy interface transactor message input port send input message void scemimessageinportproxy end const scemimessagedata datum scemiec ec null method send message message input channel message appear hardware bit vector present transactor scemimessageinport macro page instance bind proxy datum message datum object contain message send replace port bind void replacebinding const scemimessageinportbinding bind scemiec ec null method replace scemimessageinportbinding object originally furnish scemi bindmessageinportproxy create port proxy object page useful replace context input ready callback function time input message port proxy establish bind new callback context information associate message input port proxy accessor const char scemimessageinportproxy transactorname const method return transactor connect port absolute hierarchical path transactor instance express syntax hdl language netlist express const char scemimessageinportproxy ortname const method return port path scemimessageinport macro instance relative contain transactor express syntax hdl language netlist express unsigned scemimessageinportproxy ortwidth const method return port width value portwidth parameter pass associate scemimessageinport instance hardware destructor public destructor class destruction message input port automatically occur scemi hutdown function call class scemimessageoutportproxy class messageoutportproxy present application proxy interface transactor message output port receive output message method object specifically read message arrive output port proxy operation handle receive callback receive callback register output port proxy bind channel page prototype receive callback follow void receive void context const scemimessagedata datum call receive callback pass pointer class scemimessagedata object section page contain content receive message pass context pointer context pointer typically pointer object represent software model interface port proxy proper usage callback process datum quickly return soon possible reference scemimessagedata limited lifetime cease exist callback return go scope typically systemc context callback minor manipulation context object immediately return let suspend thread resume main processing receive transaction notice scemiec error status object pass error occur scemi erviceloop function receive callback normally call callback call place standard error handling procedure page follow service loop function error occur inside receive callback implication application error sce mi error responsibility application handle error set flag context object return callback replace port bind void replacebinding const scemimessageoutportbinding bind scemiec ec null method replace scemimessageoutportbinding object originally furnish scemi bindmessageoutportproxy create port proxy object page useful replace context receive callback function time output message port proxy establish bind new callback context information associate message output port proxy accessor const char scemimessageoutportproxy transactorname const method return transactor connect port absolute hierarchical path transactor instance express syntax hdl language netlist express const char scemimessageoutportproxy ortname const method return port path scemimessageoutport macro instance relative contain transactor express syntax hdl language netlist express unsigned scemimessageoutportproxy ortwidth const method return port width value portwidth parameter pass associate scemimessageoutport instance hardware destructor public destructor class destruction message output port automatically occur scemi hutdown function call software interface api sci mi software provide ansi standard api subsection follow parallel api describe start section page possible implement api function wrap call method describe api prototype function follow minimum explanatory text documentation function correspond subsection section page primitive datum type api header file following minimum content typedef unsigned scemiu32 typedef unsigned long long scemiu64 typedef void scemi typedef void scemiparameters typedef void scemimessagedata typedef void scemimessageinportproxy typedef void scemimessageoutportproxy typedef int serviceloophandler void context int pending typedef enum scemiok scemierror scemierrortype typedef struct const char culprit const char message scemierrortype type int scemiec typedef void scemierrorhandler void context scemiec ec typedef enum scemiinfo scemiwarning scemiinfotype typedef struct const char culprit const char message scemiinfotype type int scemiic typedef void scemiinfohandler void context scemiic ic typedef struct void context void isready void context void close void context scemimessageinportbinding typedef struct void context void receive void context const scemimessagedata datum void close void context scemimessageoutportbinding application include api header api header note ansi support default argument value scemiec ec argument function explicitly pass call pass null miscellaneous interface support issue scemiec error handling void scemiregistererrorhandler scemierrorhandler errorhandler void context scemiic informational status warning handling info handling void scemiregisterinfohandler scemiinfohandler infohandler void context scemi sce mi software interface version discovery int scemiversion const char versionstring initialization scemi scemiinit int version const scemiparameters parameterobjecthandle scemiec ec shutdown void scemishutdown scemi scemihandle scemiec ec message input port proxy binding scemimessageinportproxy scemibindmessageinport scemi scemihandle const char transactorname const char portname const scemimessageinportbinding binding scemiec ec message output port proxy binding scemimessageoutportproxy scemibindmessageoutport scemi scemihandle const char transactorname const char portname const scemimessageoutportbinding binding scemiec ec service loop int scemiserviceloop scemi scemihandle scemiserviceloophandler void context scemiec ec scemiparameters parameter access constructor scemiparameters scemiparametersnew const char paramsfile scemiec ec function return handle parameter object destructor void scemiparametersdelete scemiparameters parametershandle accessor unsigned int scemiparametersnumberofobjects const scemiparameters parametershandle const char objectkind scemiec ec int scemiparametersattributeintegervalue const scemiparameters parametershandle const char objectkind unsigned int index const char attributename scemiec ec const char scemiparametersattributestringvalue const scemiparameters parametershandle const char objectkind unsigned int index const char attributename scemiec ec void scemiparametersoverrideattributeintegervalue scemiparameters parametershandle const char objectkind unsigned int index const char attributename int value scemiec ec void scemiparametersoverrideattributestringvalue scemiparameters parametershandle const char objectkind unsigned int index const char attributename const char value scemiec ec scemimessagedata message datum object constructor scemimessagedata scemimessagedatanew const scemimessageinportproxy messageinportproxyhandle scemiec ec function return handle message datum object suitable send message specify input port proxy destructor void scemimessagedatadelete scemimessagedata messagedatahandle accessor unsigned int scemimessagedatawidthinbits const scemimessagedata messagedatahandle unsigned int scemimessagedatawidthinwords const scemimessagedata messagedatahandle void scemimessagedataset scemimessagedata messagedatahandle unsigned int scemiu32 word scemiec ec void scemimessagedatasetbit scemimessagedata messagedatahandle unsigned int int bit scemiec ec void scemimessagedatasetbitrange scemimessagedata messagedatahandle unsigned int unsigned int range scemiu32 bits scemiec ec scemiu32 scemimessagedataget const scemimessagedata messagedatahandle unsigned int scemiec ec int scemimessagedatagetbit const scemimessagedata messagedatahandle unsigned int scemiec ec scemiu32 scemimessagedatagetbitrange const scemimessagedata messagedatahandle unsigned int unsigned int range scemiec ec scemiu64 scemimessagedatacyclestamp const scemimessagedata messagedatahandle scemimessageinportproxy message input port proxy send input message void scemimessageinportproxysend scemimessageinportproxy messageinportproxyhandle const scemimessagedata messagedatahandle scemiec ec replace port binding void scemimessageinportproxyreplacebinding scemimessageinportproxy messageinportproxyhandle const scemimessageinportbinding bind scemiec ec accessor const char scemimessageinportproxytransactorname const scemimessageinportproxy messageinportproxyhandle const char scemimessageinportproxyportname const scemimessageinportproxy messageinportproxyhandle unsigned scemimessageinportproxyportwidth const scemimessageinportproxy messageinportproxyhandle scemimessageoutportproxy message output port proxy replace port bind void scemimessageoutportproxyreplacebinding scemimessageoutportproxy messageoutportproxyhandle const scemimessageoutportbinding bind scemiec ec accessor const char scemimessageoutportproxytransactorname const scemimessageoutportproxy messageoutportproxyhandle const char scemimessageoutportproxyportname const scemimessageoutportproxy messageoutportproxyhandle unsigned scemimessageoutportproxyportwidth const scemimessageinportproxy messageoutportproxyhandle appendix glossary abstraction bridge collection abstraction gasket component disguise bus cycle accurate bca rtl dut model purely untimed model idea untimed testbench model dut appear untimed figure page fact disguise bca model figure page abstraction gasket special model change level abstraction datum flow input output vice versa example abstraction gasket convert untimed transaction series cycle accurate event assemble series event single message example abstraction gasket coware systemc bcash model ikos transactor behavioral model definition untimed model bridge netlist bridge netlist level user supply netlist component make hardware co modeling process component typically find instantiate immediately bridge netlist transactor dut scemiclockport macro convention level netlist module supply user infrastructure linker call bridge verilog place file call bridge co emulation shorthand notation co emulation modeling know co modeling definition co modeling co modeling broad meaning outside document document co modeling specifically refer transaction orient co modeling contrast broad definition co modeling include event orient co modeling know co emulation modeling transaction orient co modeling describe process model simulate mixture software model represent untimed level abstraction simultaneously execute inter communicate abstraction bridge hardware model represent rtl level abstraction run emulator follow diagram depict configuration sce mi abstraction bridge hdl section page meaning acronym illustration see figure page abstraction bridge hardware model emulator sce mi gate netlist software model is rtc bcash control clock cclock clock drive dut disable transactor operation result erroneous operation dut clock perform operation transactor freeze control time long complete operation allow clocking dut resume term cclock document synonym control clock control time time advance control clock freeze control clock suspend transactor operation occur uncontrolled time control time freeze appear control clock cycle co simulation execution software model model different level abstraction interact abstraction gasket similar coware bcash model follow diagram illustrate configuration section page meaning acronym key difference co simulation co emulation typically couple software model traditional hdl simulator interface proprietary api couple software model emulator optimize transaction orient message passing interface sce mi algorithm bcash iss utc bcash rtc cycle stamping process message tag number elapse count fast control clock hardware co model design care duty cycle posedge active care duty cycle way specify duty cycle user care posedge clock care period negedge fall particularly relation cclock functional simulation case dutyhi parameter give dutylo give arbitrary number unit represent period phase offset express percentage period dutyhi dutylo page detail dut negedge active care duty cycle way specify duty cycle user care negedge clock care period posedge fall particularly relation cclock functional simulation case dutylo parameter give dutyhi give arbitrary number unit represent period phase offset express percentage period dutyhi dutylo page detail device design test model hardware stimulate respond software testbench abstraction bridge sce mi hardware emulator dut cpu core mem ip sce mi file dut proxy file sw model testbench software model act socket disguise abstraction bridge look rest software testbench like untimed dut model abstraction bridge sce mi job dut proxy encapsulate message port proxy interface message channel interface figure page illustration dut proxy hardware model model block structural representation result synthesis gate netlist generate appropriate tool map hardware co modeling process emulator hardware simulation platform real silicon cpu core memory chip plug emulator simulation accelerator hardware definition software infrastructure linkage process process read user description hardware source bridge netlist describe interconnect transactor dut sce mi interface component compile netlist form suitable execute co modeling session compile process involve add additional structure bridge netlist properly interface user supply netlist sce mi infrastructure implementation component macro message implementation component provide hardware emulator vendor implement hardware sce mi infrastructure required macro define specification scemimessageinport scemimessageoutport scemiclockcontrol scemiclockport macro unit datum arbitrary size abstraction transport channel message generally associate specific clock event trigger result clock event activity note term message interchangeably transaction context transaction think include infrastructure overhead content addition user payload datum handle low layer interface term message denote user payload datum message channel ended conduit message software hardware side abstraction bridge message port hardware end message channel message port mean transactor gain access message send channel software message port proxy software end message channel message port proxy mean dut proxy software model gain access message send channel hardware negedge posedge definition posedge verilog specific term refer rise edge clock generically document refer thing apply negedge refer fall edge clock service loop method provide means set software model run host workstation yield access sce mi software pende input output message channel service method call frequently software co modeling session order avoid backup message minimize possibility system deadlock multi threaded environment make sense place service loop continually run thread software model model block hardware software simulate software co modeling session host workstation model algorithm run iss hardware model model appropriate language environment coware systemc hdl simulator software term refer portion user design co modeling session run host workstation oppose portion run emulator refer hardware sce mi infrastructure consider software hardware component structural model netlist hardware model structural model definition recursive imply structural model hierarchy transaction definition message transactor form abstraction gasket job transactor decompose untimed transaction series cycle accurate clock event conversely compose series clock event single message receive message transactor ability freeze control time long allow message decomposition operation complete present clock datum dut send message freeze control time allow message composition operation complete new clock datum flood dut uncontrolled clock uclock free run system clock internally generate sce mi infrastructure transactor module advance state uncontrolled time term uclock document synonym uncontrolled clock uncontrolled reset system reset internally generate sce mi infrastructure transactor module signal high beginning simulate time transition low arbitrary implementation dependent number uclock later reset transactor control reset generate exactly sce mi hardware infrastructure beginning co modeling session uncontrolled time time advance uncontrolled clock control clock suspend control time freeze untimed model block model algorithmically functional level exchange datum model form message untimed model notion clock operation trigger arrive message turn trigger operation untimed model send message appendix multiclock hardware interface example follow diagram show level structure simple multiclock multitransactor example figure multiclock multitransactor example u1 p1 txtransactor t1 d1 tut c1 dutinctrl dutindata dutoutctrl dutoutdata c2 cclock clk rst cclock2 scemiclockport cclock creset clkdivideby2 clkdiv2 readyforcclocknegedge cclocknegedgeenabled cclockenabled readyforcclock ureset uclock scemiclockcontrol cclockenableddiv2 readyforcclockdiv2 cclockenabled readyforcclock toutdata dutoutctrl du rst uclk dutinctrl dutindata rxrdyin messagein txrdyin txtransactorcore creset cclock scemiclockport readyforcclocknegedge cclocknegedgeenabled cclockenabled readyforcclock ureset uclock scemiclockcontrol receiveready message transmitready scemimessageinport u2 p1 rxtransactor t1 d2 c1 cclock4 scemiclockport clkdivideby4 cclock creset clk rst rut dutinctrl dutindata dutoutctrl dutoutdata readyforcclockdiv4 cclockenableddiv4 toutdata dutoutctrl du rst uclk dutinctrl dutindata rxrdyout messageout txrdyout rxtransactorcore uclock ureset readyforcclock cclockenabled readyforcclocknegedge cclocknegedgeenabled scemiclockcontrol receiveready message transmitready scemimessageoutport design demonstrate follow point clockport instance define clock name cclock cclock2 cclock4 parameter give scemiclockport instance cclock default parameter mean cclock clocknum clock ratio care duty cycle phase shift controlled reset supply active duration control clock cycle cclock2 instance scemiclockport override parameter leave rest default value mean cclock2 clocknum clock ratio divide clock duty cycle phase shift clock cycle reset duration cclock4 instance scemiclockport clocknum clock ratio divide clock duty cycle phase shift clock period clock cycle reset duration txtransactor transactor model name bridge u1 control clock cclock cclock2 scemiclockcontrol macro instance clocknum clocknum respectively txtransactor model interface message input port call p1 parametrize bit width rxtransactor transactor model name bridge u2 control clock cclock4 scemiclockcontrol macro instance clocknum rxtransactor model interface message input port call p1 parametrize bit width follow listing show vhdl source code schematic library ieee use ieee std logic library scemi use scemi scemimacros entity bridge end architecture structural bridge component txtransactor port dutinctrl std logic dutindata std logic vector downto dutoutctrl std logic dutoutdata std logic vector downto end component txtransactor component tut port dutinctrl std logic dutindata std logic vector downto dutoutctrl std logic dutoutdata std logic vector downto clk rst clkdiv2 std logic end component tut component rxtransactor port dutinctrl std logic dutindata std logic vector downto dutoutctrl std logic dutoutdata std logic vector downto end component rxtransactor component rut port dutinctrl std logic dutindata std logic vector downto dutoutctrl std logic dutoutdata std logic vector downto clk rst std logic end component rut signal tutinctrl tutoutctrl std logic signal tutindata tutoutdata std logic vector downto signal rutinctrl rutoutctrl std logic signal rutindata rutoutdata std logic vector downto signal cclock creset clkdivideby2 clkdivideby4 cresetdivideby4 std logic begin u1 txtransactor port map tutinctrl tutindata tutoutctrl tutoutdata d1 tut port map tutinctrl tutindata tutoutctrl tutoutdata cclock creset clkdivideby2 cclock scemiclockport port map cclock creset cclock2 scemiclockport generic map port map clkdivideby2 open u2 rxtransactor port map tutinctrl tutindata tutoutctrl tutoutdata d2 rut port map tutinctrl tutindata tutoutctrl tutoutdata clkdivideby4 cresetdivideby4 cclock4 scemiclockport generic map port map clkdivideby2 open end library ieee use ieee std logic library scemi use scemi scemimacros entity txtransactor port dutinctrl std logic dutindata std logic vector downto dutoutctrl std logic dutoutdata std logic vector downto end architecture structural txtransactor component txtransactorcore port txrdyin std logic rxrdyin std logic message std logic downto dutinctrl std logic dutindata std logic vector downto dutoutctrl std logic dutoutdata std logic vector downto uclk rst std logic readyforcclock std logic cclockenabled std logic readyforcclockdiv2 std logic cclockenableddiv2 std logic end component txtransactor signal transmitready receiveready std logic signal message std logic vector downto signal uclock ureset std logic signal readyforcclock cclockenabled std logic signal readyforcclockdiv2 cclockenableddiv2 begin t1 txtransactorcore port map transmitready receiveready message dutinctrl dutindata dutoutctrl dutoutdata uclock ureset readyforcclock cclockenabled readyforcclockdiv2 cclockenableddiv2 p1 scemimessageinputport generic map port map transmitready receiveready message c1 scemiclockcontrol port map uclock ureset readyforcclock cclockenabled open c2 scemiclockcontrol generic map port map open open readyforcclockdiv2 cclockenableddiv2 open end appendix vhdl scemimacros package following package supply sce mi macro component declaration application suggest package compile library scemi include application code library scemi use scemi scemimacros source code package library ieee use ieee std logic package scemimacros component scemimessageinport generic portwidth natural port receiveready std logic transmitready std logic message std logic vector portwidth downto end component component scemimessageoutport generic portwidth natural portpriority natural port transmitready std logic receiveready std logic message std logic vector portwidth downto end component component scemiclockport generic clocknum natural rationumerator natural ratiodenominator natural dutyhi natural dutylo natural phase natural resetcycles natural port cclock std logic creset std logic end component component scemiclockcontrol generic clocknum natural port uclock ureset std logic readyforcclock std logic cclockenable std logic readyforcclocknegedge std logic cclocknegedgeenabled std logic end component end scemimacros